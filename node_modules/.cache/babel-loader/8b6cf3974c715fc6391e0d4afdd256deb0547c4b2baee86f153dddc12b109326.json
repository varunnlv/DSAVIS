{"ast":null,"code":"var _jsxFileName = \"D:\\\\PR'S\\\\pff\\\\pathfinding-visualizer\\\\src\\\\components\\\\PathfindingVisualizer.jsx\",\n  _s = $RefreshSig$();\n// PathfindingVisualizer.jsx\nimport React, { useState, useRef } from \"react\";\nimport \"./PathfindingVisualizer.css\";\nimport { executeAlgorithm } from \"../algorithms\";\nimport Node from \"./Node\";\nimport Toolbar from \"../utils/ToolBar\";\nimport { useGridHandler } from \"../hooks/useGridHandler\";\nimport { useVisualization } from \"../hooks/useVisualization\";\nimport { useMazeGenerator } from \"../hooks/useMazeGenerator\";\nimport { initialGrid, findStartNode, findFinishNode, initialGrid2 } from \"../utils/GridUtils\";\nimport { dijkstra } from \"../algorithms/dijkstra\";\nimport { dfs } from \"../algorithms/dfs\";\nimport { bfs } from \"../algorithms/bfs\";\nimport { astar } from \"../algorithms/astar\";\nimport { gbfs } from \"../algorithms/gbfs\";\nimport { bidirectional } from \"../algorithms/bidirectional\";\nimport AlgorithmStats from \"./algorithmStats\";\nimport { FaGithub } from \"react-icons/fa\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst algorithms = [{\n  label: \"Dijkstra\",\n  actionKey: \"dijkstra\",\n  func: dijkstra\n}, {\n  label: \"A*\",\n  actionKey: \"astar\",\n  func: astar\n}, {\n  label: \"Greedy Best First Search\",\n  actionKey: \"gbfs\",\n  func: gbfs\n}, {\n  label: \"Bidirectional Search\",\n  actionKey: \"bidirectional\",\n  func: bidirectional\n}, {\n  label: \"Breadth First Search\",\n  actionKey: \"bfs\",\n  func: bfs\n}, {\n  label: \"Depth First Search\",\n  actionKey: \"dfs\",\n  func: dfs\n}];\nconst mazeOptions = [{\n  label: \"Randomize Board\",\n  actionKey: \"randomizeBoard\"\n}, {\n  label: \"Recursive Division Maze\",\n  actionKey: \"generateRecursiveDivisionMaze\"\n}];\nconst PathfindingVisualizer = () => {\n  _s();\n  const [numRows, setNumRows] = useState(30);\n  const [numCols, setNumCols] = useState(60);\n  const [weight, setweight] = useState(1);\n  const [Rowsd, setRowsd] = useState(1);\n  const [Colsd, setColsd] = useState(1);\n  const [grid, setGrid] = useState(initialGrid());\n  const {\n    handleMouseDown,\n    handleMouseEnter,\n    handleMouseUp\n  } = useGridHandler(grid, setGrid);\n  const {\n    visualize,\n    clearBoard,\n    resetForVisualization,\n    resetForMaze\n  } = useVisualization(grid, setGrid);\n  const {\n    randomizeBoard,\n    generateWeightedMaze,\n    generateRecursiveDivisionMaze\n  } = useMazeGenerator(grid, setGrid);\n  const [isWeightedGraph, setIsWeightedGraph] = useState(false);\n  const [runtime, setRuntime] = useState(0);\n  const [pathCost, setPathCost] = useState(0);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState(algorithms[0]); // Default to Dijkstra object\n\n  const [showDashboard, setShowDashboard] = useState(false);\n  const [showHeroSection, setShowHeroSection] = useState(true);\n\n  // Ref to access the dashboard div\n  const dashboardRef = useRef(null);\n\n  // Function to show the dashboard and scroll to it on button click\n  const handleGetStartedClick = e => {\n    e.preventDefault();\n    setShowDashboard(true); // Show the dashboard\n    setShowHeroSection(false);\n    // Scroll to the dashboard div after it becomes visible\n    setTimeout(() => {\n      if (dashboardRef.current) {\n        dashboardRef.current.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }, 100); // Delay to ensure the div is rendered before scrolling\n  };\n  const handleToolbarAction = actionKey => {\n    switch (actionKey) {\n      case \"clearBoard\":\n        clearBoard();\n        break;\n      case \"clearPath\":\n        resetForVisualization();\n        break;\n      case \"randomizeBoard\":\n        resetForMaze();\n        randomizeBoard(); // Assuming this generates a random maze\n        break;\n      case \"generateRecursiveDivisionMaze\":\n        resetForMaze();\n        generateRecursiveDivisionMaze();\n        break;\n      case \"generateWeightedMaze\":\n        resetForMaze();\n        generateWeightedMaze();\n        break;\n      case \"visualize\":\n        resetForVisualization();\n        startVisualization(selectedAlgorithm.actionKey);\n        break;\n      default:\n        if (actionKey.startsWith(\"algo-\")) {\n          const algorithmKey = actionKey.replace(\"algo-\", \"\");\n          const selected = algorithms.find(algo => algo.actionKey === algorithmKey);\n          if (selected) {\n            setSelectedAlgorithm(selected);\n          }\n        }\n        break;\n    }\n  };\n  const startchekinggrid = (rows, columns) => {\n    // setColsd(parseFloat((parseFloat(columns) / 60).toFixed(2)));\n    // setRowsd(((parseFloat(rows))/30).toFixed(2));\n    // setweight(Colsd * Rowsd);\n\n    if (columns < 50) {\n      columns = 50;\n    }\n    if (rows < 30) {\n      rows = 30;\n    }\n    if (columns > 120) {\n      columns = 120;\n    }\n    if (rows > 70) {\n      rows = 70;\n    }\n    setGrid(initialGrid2(rows, columns));\n  };\n  const startVisualization = () => {\n    const startNode = findStartNode(grid);\n    const finishNode = findFinishNode(grid);\n    const algorithmFunc = selectedAlgorithm.func;\n    if (!algorithmFunc) {\n      console.error(`Algorithm function not found.`);\n      return;\n    }\n    const startTime = performance.now(); // Start timing\n    const result = executeAlgorithm(algorithmFunc, grid, startNode, finishNode);\n    const endTime = performance.now(); // End timing\n\n    if (!result || !result.visitedNodesInOrder || !result.nodesInShortestPathOrder) {\n      console.error(\"Algorithm did not return expected result.\");\n      return; // Exit to avoid calling visualize with undefined values\n    }\n    const runtime = endTime - startTime;\n    const pathCost = result.nodesInShortestPathOrder.reduce((acc, node) => acc + node.weight, 0);\n    setRuntime(runtime);\n    setPathCost(pathCost);\n    visualize(result.visitedNodesInOrder, result.nodesInShortestPathOrder);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n      onAction: handleToolbarAction,\n      selectedAlgorithm: selectedAlgorithm.label,\n      algorithmItems: algorithms.map(algo => ({\n        label: algo.label,\n        actionKey: `algo-${algo.actionKey}`\n      })),\n      mazeItems: mazeOptions // Pass the maze options here\n      // isWeightedGraph={isWeightedGraph}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), showHeroSection && /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"hero\",\n      class: \"d-flex align-items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container position-relative\",\n        \"data-aos\": \"fade-up\",\n        \"data-aos-delay\": \"500\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Welcome to DSA VISUALIZER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#categories\",\n          className: \"btn-get-started scrollto\",\n          onClick: handleGetStartedClick,\n          children: \"Get Started!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this), showDashboard && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      ref: dashboardRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard\",\n        children: [/*#__PURE__*/_jsxDEV(AlgorithmStats, {\n          runtime: runtime,\n          pathCost: pathCost\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-settings\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"algorithm-stats\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-label\",\n                children: \"Distance \\u27F7 (Km)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-value\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: numCols,\n                  onChange: e => setNumCols(Number(e.target.value)),\n                  min: 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-label\",\n                children: \"Distance \\u2195 (Km)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"stat-value\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: numRows,\n                  onChange: e => setNumRows(Number(e.target.value)),\n                  min: 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 254,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => startchekinggrid(numRows, numCols),\n              children: \"Generate Grid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-wrapper\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid\",\n          children: grid.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: row.map((node, nodeIdx) => /*#__PURE__*/_jsxDEV(Node, {\n              col: node.col,\n              row: node.row,\n              isStart: node.isStart,\n              isFinish: node.isFinish,\n              isWall: node.isWall,\n              isVisualized: node.isVisualized,\n              isPath: node.isPath,\n              distance: node.distance,\n              weight: node.weight\n              // onMouseDown={() => handleMouseDown(rowIdx, nodeIdx)}\n              ,\n              onMouseDown: event => handleMouseDown(event, rowIdx, nodeIdx),\n              onMouseEnter: event => handleMouseEnter(rowIdx, nodeIdx),\n              onMouseUp: handleMouseUp\n            }, nodeIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 21\n            }, this))\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(PathfindingVisualizer, \"00hXgHZ6IE/LzLOtCA9dBQGu2k8=\", false, function () {\n  return [useGridHandler, useVisualization, useMazeGenerator];\n});\n_c = PathfindingVisualizer;\nexport default PathfindingVisualizer;\nvar _c;\n$RefreshReg$(_c, \"PathfindingVisualizer\");","map":{"version":3,"names":["React","useState","useRef","executeAlgorithm","Node","Toolbar","useGridHandler","useVisualization","useMazeGenerator","initialGrid","findStartNode","findFinishNode","initialGrid2","dijkstra","dfs","bfs","astar","gbfs","bidirectional","AlgorithmStats","FaGithub","jsxDEV","_jsxDEV","algorithms","label","actionKey","func","mazeOptions","PathfindingVisualizer","_s","numRows","setNumRows","numCols","setNumCols","weight","setweight","Rowsd","setRowsd","Colsd","setColsd","grid","setGrid","handleMouseDown","handleMouseEnter","handleMouseUp","visualize","clearBoard","resetForVisualization","resetForMaze","randomizeBoard","generateWeightedMaze","generateRecursiveDivisionMaze","isWeightedGraph","setIsWeightedGraph","runtime","setRuntime","pathCost","setPathCost","selectedAlgorithm","setSelectedAlgorithm","showDashboard","setShowDashboard","showHeroSection","setShowHeroSection","dashboardRef","handleGetStartedClick","e","preventDefault","setTimeout","current","scrollIntoView","behavior","handleToolbarAction","startVisualization","startsWith","algorithmKey","replace","selected","find","algo","startchekinggrid","rows","columns","startNode","finishNode","algorithmFunc","console","error","startTime","performance","now","result","endTime","visitedNodesInOrder","nodesInShortestPathOrder","reduce","acc","node","className","children","onAction","algorithmItems","map","mazeItems","fileName","_jsxFileName","lineNumber","columnNumber","id","class","href","onClick","ref","type","value","onChange","Number","target","min","row","rowIdx","nodeIdx","col","isStart","isFinish","isWall","isVisualized","isPath","distance","onMouseDown","event","onMouseEnter","onMouseUp","_c","$RefreshReg$"],"sources":["D:/PR'S/pff/pathfinding-visualizer/src/components/PathfindingVisualizer.jsx"],"sourcesContent":["// PathfindingVisualizer.jsx\r\nimport React, { useState, useRef } from \"react\";\r\nimport \"./PathfindingVisualizer.css\";\r\nimport { executeAlgorithm } from \"../algorithms\";\r\nimport Node from \"./Node\";\r\nimport Toolbar from \"../utils/ToolBar\";\r\nimport { useGridHandler } from \"../hooks/useGridHandler\";\r\nimport { useVisualization } from \"../hooks/useVisualization\";\r\nimport { useMazeGenerator } from \"../hooks/useMazeGenerator\";\r\nimport { initialGrid, findStartNode, findFinishNode, initialGrid2 } from \"../utils/GridUtils\";\r\nimport { dijkstra } from \"../algorithms/dijkstra\";\r\nimport { dfs } from \"../algorithms/dfs\";\r\nimport { bfs } from \"../algorithms/bfs\";\r\nimport { astar } from \"../algorithms/astar\";\r\nimport { gbfs } from \"../algorithms/gbfs\";\r\nimport { bidirectional } from \"../algorithms/bidirectional\";\r\nimport AlgorithmStats from \"./algorithmStats\";\r\nimport { FaGithub } from \"react-icons/fa\";\r\n\r\n\r\n\r\nconst algorithms = [\r\n  { label: \"Dijkstra\", actionKey: \"dijkstra\", func: dijkstra },\r\n  { label: \"A*\", actionKey: \"astar\", func: astar },\r\n  { label: \"Greedy Best First Search\", actionKey: \"gbfs\", func: gbfs },\r\n  {\r\n    label: \"Bidirectional Search\",\r\n    actionKey: \"bidirectional\",\r\n    func: bidirectional,\r\n  },\r\n  { label: \"Breadth First Search\", actionKey: \"bfs\", func: bfs },\r\n  { label: \"Depth First Search\", actionKey: \"dfs\", func: dfs },\r\n];\r\n\r\nconst mazeOptions = [\r\n  { label: \"Randomize Board\", actionKey: \"randomizeBoard\" },\r\n  {\r\n    label: \"Recursive Division Maze\",\r\n    actionKey: \"generateRecursiveDivisionMaze\",\r\n  },\r\n];\r\n\r\n\r\nconst PathfindingVisualizer = () => {\r\n\r\n  const [numRows, setNumRows] = useState(30);\r\n  const [numCols, setNumCols] = useState(60);\r\n\r\n  const [weight, setweight] = useState(1);\r\n\r\n  const [Rowsd, setRowsd] = useState(1);\r\n  const [Colsd, setColsd] = useState(1);\r\n\r\n  const [grid, setGrid] = useState(initialGrid());\r\n  const { handleMouseDown, handleMouseEnter, handleMouseUp } = useGridHandler(\r\n    grid,\r\n    setGrid\r\n  );\r\n  const { visualize, clearBoard, resetForVisualization, resetForMaze } =\r\n    useVisualization(grid, setGrid);\r\n\r\n  const {\r\n    randomizeBoard,\r\n    generateWeightedMaze,\r\n    generateRecursiveDivisionMaze,\r\n  } = useMazeGenerator(grid, setGrid);\r\n  const [isWeightedGraph, setIsWeightedGraph] = useState(false);\r\n\r\n  const [runtime, setRuntime] = useState(0);\r\n  const [pathCost, setPathCost] = useState(0);\r\n\r\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState(algorithms[0]); // Default to Dijkstra object\r\n\r\n  const [showDashboard, setShowDashboard] = useState(false);\r\n\r\n  const [showHeroSection, setShowHeroSection] = useState(true);\r\n  \r\n  // Ref to access the dashboard div\r\n  const dashboardRef = useRef(null);\r\n\r\n  // Function to show the dashboard and scroll to it on button click\r\n  const handleGetStartedClick = (e) => {\r\n    e.preventDefault();\r\n    setShowDashboard(true); // Show the dashboard\r\n    setShowHeroSection(false);\r\n    // Scroll to the dashboard div after it becomes visible\r\n    setTimeout(() => {\r\n      if (dashboardRef.current) {\r\n        dashboardRef.current.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    }, 100); // Delay to ensure the div is rendered before scrolling\r\n  };\r\n\r\n  \r\n  const handleToolbarAction = (actionKey) => {\r\n    switch (actionKey) {\r\n      case \"clearBoard\":\r\n        clearBoard();\r\n        break;\r\n      case \"clearPath\":\r\n        resetForVisualization();\r\n        break;\r\n      case \"randomizeBoard\":\r\n        resetForMaze();\r\n        randomizeBoard(); // Assuming this generates a random maze\r\n        break;\r\n      case \"generateRecursiveDivisionMaze\":\r\n        resetForMaze();\r\n        generateRecursiveDivisionMaze();\r\n        break;\r\n      case \"generateWeightedMaze\":\r\n        resetForMaze();\r\n        generateWeightedMaze();\r\n        break;\r\n      case \"visualize\":\r\n        resetForVisualization();\r\n        startVisualization(selectedAlgorithm.actionKey);\r\n        break;\r\n      default:\r\n        if (actionKey.startsWith(\"algo-\")) {\r\n          const algorithmKey = actionKey.replace(\"algo-\", \"\");\r\n          const selected = algorithms.find(\r\n            (algo) => algo.actionKey === algorithmKey\r\n          );\r\n          if (selected) {\r\n            setSelectedAlgorithm(selected);\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  };\r\n\r\n  const startchekinggrid = (rows,columns) => {\r\n\r\n    // setColsd(parseFloat((parseFloat(columns) / 60).toFixed(2)));\r\n    // setRowsd(((parseFloat(rows))/30).toFixed(2));\r\n    // setweight(Colsd * Rowsd);\r\n\r\n    if(columns < 50){\r\n      columns = 50;  \r\n    }\r\n    if(rows < 30){\r\n      rows = 30;\r\n    }\r\n\r\n\r\n    if(columns > 120 ){\r\n      columns = 120;  \r\n    }\r\n\r\n    if(rows > 70){\r\n      rows = 70;\r\n    }\r\n\r\n    setGrid(initialGrid2(rows, columns));\r\n  };\r\n\r\n  const startVisualization = () => {\r\n    const startNode = findStartNode(grid);\r\n    const finishNode = findFinishNode(grid);\r\n    const algorithmFunc = selectedAlgorithm.func;\r\n\r\n    if (!algorithmFunc) {\r\n      console.error(`Algorithm function not found.`);\r\n      return;\r\n    }\r\n\r\n    const startTime = performance.now(); // Start timing\r\n    const result = executeAlgorithm(algorithmFunc, grid, startNode, finishNode);\r\n    const endTime = performance.now(); // End timing\r\n\r\n    if (\r\n      !result ||\r\n      !result.visitedNodesInOrder ||\r\n      !result.nodesInShortestPathOrder\r\n    ) {\r\n      console.error(\"Algorithm did not return expected result.\");\r\n      return; // Exit to avoid calling visualize with undefined values\r\n    }\r\n\r\n    const runtime = endTime - startTime;\r\n    const pathCost = result.nodesInShortestPathOrder.reduce(\r\n      (acc, node) => acc + node.weight,\r\n      0\r\n    );\r\n\r\n    setRuntime(runtime);\r\n    setPathCost(pathCost);\r\n\r\n    visualize(result.visitedNodesInOrder, result.nodesInShortestPathOrder);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Toolbar\r\n        onAction={handleToolbarAction}\r\n        selectedAlgorithm={selectedAlgorithm.label}\r\n        algorithmItems={algorithms.map((algo) => ({\r\n          label: algo.label,\r\n          actionKey: `algo-${algo.actionKey}`,\r\n        }))}\r\n        mazeItems={mazeOptions} // Pass the maze options here\r\n        // isWeightedGraph={isWeightedGraph}\r\n      />\r\n\r\n      {showHeroSection && (\r\n        <section id=\"hero\" class=\"d-flex align-items-center\">\r\n           <div\r\n             class=\"container position-relative\"\r\n             data-aos=\"fade-up\"\r\n             data-aos-delay=\"500\"\r\n           >\r\n             <h1>Welcome to DSA VISUALIZER</h1>\r\n             <a\r\n                 href=\"#categories\"\r\n                 className=\"btn-get-started scrollto\"\r\n                 onClick={handleGetStartedClick}\r\n               >\r\n                 Get Started!\r\n               </a>\r\n           </div>\r\n        </section>\r\n      )}\r\n\r\n\r\n\r\n\r\n   \r\n\r\n      {showDashboard && (\r\n        <div className=\"dashboard\" ref={dashboardRef}>\r\n          <div className=\"dashboard\">\r\n        <AlgorithmStats runtime={runtime} pathCost={pathCost} />\r\n        {/* <WeightLegend /> */}\r\n\r\n        <div className=\"grid-settings\">\r\n          <div className=\"algorithm-stats\">\r\n            <div className=\"stat-item\">\r\n              {/* Optional: Icon for runtime */}\r\n              <div className=\"stat-label\">Distance ⟷ (Km)</div>\r\n              <div className=\"stat-value\">\r\n              <input \r\n                  type=\"number\" \r\n                  value={numCols} \r\n                  onChange={(e) => setNumCols(Number(e.target.value))} \r\n                  min={1}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"stat-item\">\r\n              {/* Optional: Icon for path cost */}\r\n              <div className=\"stat-label\">Distance ↕ (Km)</div>\r\n              <div className=\"stat-value\">\r\n                <input \r\n                  type=\"number\" \r\n                  value={numRows} \r\n                  onChange={(e) => setNumRows(Number(e.target.value))} \r\n                  min={1}\r\n                />\r\n              </div>\r\n            </div>\r\n            <button onClick={() => startchekinggrid(numRows, numCols)}>\r\n            Generate Grid\r\n            </button>       \r\n          </div>     \r\n        </div>\r\n\r\n          </div>\r\n          <div className=\"grid-wrapper\">\r\n            {\" \"}\r\n            {/* New wrapper for the grid */}\r\n            <div className=\"grid\">\r\n              {grid.map((row, rowIdx) => (\r\n                <div key={rowIdx} className=\"row\">\r\n                  {row.map((node, nodeIdx) => (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={node.col}\r\n                      row={node.row}\r\n                      isStart={node.isStart}\r\n                      isFinish={node.isFinish}\r\n                      isWall={node.isWall}\r\n                      isVisualized={node.isVisualized}\r\n                      isPath={node.isPath}\r\n                      distance={node.distance}\r\n                      weight={node.weight}\r\n                      // onMouseDown={() => handleMouseDown(rowIdx, nodeIdx)}\r\n                      onMouseDown={(event) =>\r\n                        handleMouseDown(event, rowIdx, nodeIdx)\r\n                      }\r\n                      onMouseEnter={(event) => handleMouseEnter(rowIdx, nodeIdx)}\r\n                      onMouseUp={handleMouseUp}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PathfindingVisualizer;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAO,6BAA6B;AACpC,SAASC,gBAAgB,QAAQ,eAAe;AAChD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,OAAO,MAAM,kBAAkB;AACtC,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,SAASC,WAAW,EAAEC,aAAa,EAAEC,cAAc,EAAEC,YAAY,QAAQ,oBAAoB;AAC7F,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,GAAG,QAAQ,mBAAmB;AACvC,SAASC,GAAG,QAAQ,mBAAmB;AACvC,SAASC,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,IAAI,QAAQ,oBAAoB;AACzC,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,QAAQ,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI1C,MAAMC,UAAU,GAAG,CACjB;EAAEC,KAAK,EAAE,UAAU;EAAEC,SAAS,EAAE,UAAU;EAAEC,IAAI,EAAEb;AAAS,CAAC,EAC5D;EAAEW,KAAK,EAAE,IAAI;EAAEC,SAAS,EAAE,OAAO;EAAEC,IAAI,EAAEV;AAAM,CAAC,EAChD;EAAEQ,KAAK,EAAE,0BAA0B;EAAEC,SAAS,EAAE,MAAM;EAAEC,IAAI,EAAET;AAAK,CAAC,EACpE;EACEO,KAAK,EAAE,sBAAsB;EAC7BC,SAAS,EAAE,eAAe;EAC1BC,IAAI,EAAER;AACR,CAAC,EACD;EAAEM,KAAK,EAAE,sBAAsB;EAAEC,SAAS,EAAE,KAAK;EAAEC,IAAI,EAAEX;AAAI,CAAC,EAC9D;EAAES,KAAK,EAAE,oBAAoB;EAAEC,SAAS,EAAE,KAAK;EAAEC,IAAI,EAAEZ;AAAI,CAAC,CAC7D;AAED,MAAMa,WAAW,GAAG,CAClB;EAAEH,KAAK,EAAE,iBAAiB;EAAEC,SAAS,EAAE;AAAiB,CAAC,EACzD;EACED,KAAK,EAAE,yBAAyB;EAChCC,SAAS,EAAE;AACb,CAAC,CACF;AAGD,MAAMG,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAElC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC+B,OAAO,EAAEC,UAAU,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAM,CAACiC,MAAM,EAAEC,SAAS,CAAC,GAAGlC,QAAQ,CAAC,CAAC,CAAC;EAEvC,MAAM,CAACmC,KAAK,EAAEC,QAAQ,CAAC,GAAGpC,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACqC,KAAK,EAAEC,QAAQ,CAAC,GAAGtC,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAM,CAACuC,IAAI,EAAEC,OAAO,CAAC,GAAGxC,QAAQ,CAACQ,WAAW,CAAC,CAAC,CAAC;EAC/C,MAAM;IAAEiC,eAAe;IAAEC,gBAAgB;IAAEC;EAAc,CAAC,GAAGtC,cAAc,CACzEkC,IAAI,EACJC,OACF,CAAC;EACD,MAAM;IAAEI,SAAS;IAAEC,UAAU;IAAEC,qBAAqB;IAAEC;EAAa,CAAC,GAClEzC,gBAAgB,CAACiC,IAAI,EAAEC,OAAO,CAAC;EAEjC,MAAM;IACJQ,cAAc;IACdC,oBAAoB;IACpBC;EACF,CAAC,GAAG3C,gBAAgB,CAACgC,IAAI,EAAEC,OAAO,CAAC;EACnC,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGpD,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAM,CAACqD,OAAO,EAAEC,UAAU,CAAC,GAAGtD,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACuD,QAAQ,EAAEC,WAAW,CAAC,GAAGxD,QAAQ,CAAC,CAAC,CAAC;EAE3C,MAAM,CAACyD,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG1D,QAAQ,CAACsB,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE3E,MAAM,CAACqC,aAAa,EAAEC,gBAAgB,CAAC,GAAG5D,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAM,CAAC6D,eAAe,EAAEC,kBAAkB,CAAC,GAAG9D,QAAQ,CAAC,IAAI,CAAC;;EAE5D;EACA,MAAM+D,YAAY,GAAG9D,MAAM,CAAC,IAAI,CAAC;;EAEjC;EACA,MAAM+D,qBAAqB,GAAIC,CAAC,IAAK;IACnCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBN,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IACxBE,kBAAkB,CAAC,KAAK,CAAC;IACzB;IACAK,UAAU,CAAC,MAAM;MACf,IAAIJ,YAAY,CAACK,OAAO,EAAE;QACxBL,YAAY,CAACK,OAAO,CAACC,cAAc,CAAC;UAAEC,QAAQ,EAAE;QAAS,CAAC,CAAC;MAC7D;IACF,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACX,CAAC;EAGD,MAAMC,mBAAmB,GAAI/C,SAAS,IAAK;IACzC,QAAQA,SAAS;MACf,KAAK,YAAY;QACfqB,UAAU,CAAC,CAAC;QACZ;MACF,KAAK,WAAW;QACdC,qBAAqB,CAAC,CAAC;QACvB;MACF,KAAK,gBAAgB;QACnBC,YAAY,CAAC,CAAC;QACdC,cAAc,CAAC,CAAC,CAAC,CAAC;QAClB;MACF,KAAK,+BAA+B;QAClCD,YAAY,CAAC,CAAC;QACdG,6BAA6B,CAAC,CAAC;QAC/B;MACF,KAAK,sBAAsB;QACzBH,YAAY,CAAC,CAAC;QACdE,oBAAoB,CAAC,CAAC;QACtB;MACF,KAAK,WAAW;QACdH,qBAAqB,CAAC,CAAC;QACvB0B,kBAAkB,CAACf,iBAAiB,CAACjC,SAAS,CAAC;QAC/C;MACF;QACE,IAAIA,SAAS,CAACiD,UAAU,CAAC,OAAO,CAAC,EAAE;UACjC,MAAMC,YAAY,GAAGlD,SAAS,CAACmD,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;UACnD,MAAMC,QAAQ,GAAGtD,UAAU,CAACuD,IAAI,CAC7BC,IAAI,IAAKA,IAAI,CAACtD,SAAS,KAAKkD,YAC/B,CAAC;UACD,IAAIE,QAAQ,EAAE;YACZlB,oBAAoB,CAACkB,QAAQ,CAAC;UAChC;QACF;QACA;IACJ;EACF,CAAC;EAED,MAAMG,gBAAgB,GAAGA,CAACC,IAAI,EAACC,OAAO,KAAK;IAEzC;IACA;IACA;;IAEA,IAAGA,OAAO,GAAG,EAAE,EAAC;MACdA,OAAO,GAAG,EAAE;IACd;IACA,IAAGD,IAAI,GAAG,EAAE,EAAC;MACXA,IAAI,GAAG,EAAE;IACX;IAGA,IAAGC,OAAO,GAAG,GAAG,EAAE;MAChBA,OAAO,GAAG,GAAG;IACf;IAEA,IAAGD,IAAI,GAAG,EAAE,EAAC;MACXA,IAAI,GAAG,EAAE;IACX;IAEAxC,OAAO,CAAC7B,YAAY,CAACqE,IAAI,EAAEC,OAAO,CAAC,CAAC;EACtC,CAAC;EAED,MAAMT,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAMU,SAAS,GAAGzE,aAAa,CAAC8B,IAAI,CAAC;IACrC,MAAM4C,UAAU,GAAGzE,cAAc,CAAC6B,IAAI,CAAC;IACvC,MAAM6C,aAAa,GAAG3B,iBAAiB,CAAChC,IAAI;IAE5C,IAAI,CAAC2D,aAAa,EAAE;MAClBC,OAAO,CAACC,KAAK,CAAE,+BAA8B,CAAC;MAC9C;IACF;IAEA,MAAMC,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC,CAAC,CAAC;IACrC,MAAMC,MAAM,GAAGxF,gBAAgB,CAACkF,aAAa,EAAE7C,IAAI,EAAE2C,SAAS,EAAEC,UAAU,CAAC;IAC3E,MAAMQ,OAAO,GAAGH,WAAW,CAACC,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEnC,IACE,CAACC,MAAM,IACP,CAACA,MAAM,CAACE,mBAAmB,IAC3B,CAACF,MAAM,CAACG,wBAAwB,EAChC;MACAR,OAAO,CAACC,KAAK,CAAC,2CAA2C,CAAC;MAC1D,OAAO,CAAC;IACV;IAEA,MAAMjC,OAAO,GAAGsC,OAAO,GAAGJ,SAAS;IACnC,MAAMhC,QAAQ,GAAGmC,MAAM,CAACG,wBAAwB,CAACC,MAAM,CACrD,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAAC/D,MAAM,EAChC,CACF,CAAC;IAEDqB,UAAU,CAACD,OAAO,CAAC;IACnBG,WAAW,CAACD,QAAQ,CAAC;IAErBX,SAAS,CAAC8C,MAAM,CAACE,mBAAmB,EAAEF,MAAM,CAACG,wBAAwB,CAAC;EACxE,CAAC;EAED,oBACExE,OAAA;IAAK4E,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnB7E,OAAA,CAACjB,OAAO;MACN+F,QAAQ,EAAE5B,mBAAoB;MAC9Bd,iBAAiB,EAAEA,iBAAiB,CAAClC,KAAM;MAC3C6E,cAAc,EAAE9E,UAAU,CAAC+E,GAAG,CAAEvB,IAAI,KAAM;QACxCvD,KAAK,EAAEuD,IAAI,CAACvD,KAAK;QACjBC,SAAS,EAAG,QAAOsD,IAAI,CAACtD,SAAU;MACpC,CAAC,CAAC,CAAE;MACJ8E,SAAS,EAAE5E,WAAY,CAAC;MACxB;IAAA;MAAA6E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,EAED7C,eAAe,iBACdxC,OAAA;MAASsF,EAAE,EAAC,MAAM;MAACC,KAAK,EAAC,2BAA2B;MAAAV,QAAA,eACjD7E,OAAA;QACEuF,KAAK,EAAC,6BAA6B;QACnC,YAAS,SAAS;QAClB,kBAAe,KAAK;QAAAV,QAAA,gBAEpB7E,OAAA;UAAA6E,QAAA,EAAI;QAAyB;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClCrF,OAAA;UACIwF,IAAI,EAAC,aAAa;UAClBZ,SAAS,EAAC,0BAA0B;UACpCa,OAAO,EAAE9C,qBAAsB;UAAAkC,QAAA,EAChC;QAED;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACV,EAOA/C,aAAa,iBACZtC,OAAA;MAAK4E,SAAS,EAAC,WAAW;MAACc,GAAG,EAAEhD,YAAa;MAAAmC,QAAA,gBAC3C7E,OAAA;QAAK4E,SAAS,EAAC,WAAW;QAAAC,QAAA,gBAC5B7E,OAAA,CAACH,cAAc;UAACmC,OAAO,EAAEA,OAAQ;UAACE,QAAQ,EAAEA;QAAS;UAAAgD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAGxDrF,OAAA;UAAK4E,SAAS,EAAC,eAAe;UAAAC,QAAA,eAC5B7E,OAAA;YAAK4E,SAAS,EAAC,iBAAiB;YAAAC,QAAA,gBAC9B7E,OAAA;cAAK4E,SAAS,EAAC,WAAW;cAAAC,QAAA,gBAExB7E,OAAA;gBAAK4E,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAe;gBAAAK,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACjDrF,OAAA;gBAAK4E,SAAS,EAAC,YAAY;gBAAAC,QAAA,eAC3B7E,OAAA;kBACI2F,IAAI,EAAC,QAAQ;kBACbC,KAAK,EAAElF,OAAQ;kBACfmF,QAAQ,EAAGjD,CAAC,IAAKjC,UAAU,CAACmF,MAAM,CAAClD,CAAC,CAACmD,MAAM,CAACH,KAAK,CAAC,CAAE;kBACpDI,GAAG,EAAE;gBAAE;kBAAAd,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACR;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eACNrF,OAAA;cAAK4E,SAAS,EAAC,WAAW;cAAAC,QAAA,gBAExB7E,OAAA;gBAAK4E,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAC;cAAe;gBAAAK,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACjDrF,OAAA;gBAAK4E,SAAS,EAAC,YAAY;gBAAAC,QAAA,eACzB7E,OAAA;kBACE2F,IAAI,EAAC,QAAQ;kBACbC,KAAK,EAAEpF,OAAQ;kBACfqF,QAAQ,EAAGjD,CAAC,IAAKnC,UAAU,CAACqF,MAAM,CAAClD,CAAC,CAACmD,MAAM,CAACH,KAAK,CAAC,CAAE;kBACpDI,GAAG,EAAE;gBAAE;kBAAAd,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACR;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eACNrF,OAAA;cAAQyF,OAAO,EAAEA,CAAA,KAAM/B,gBAAgB,CAAClD,OAAO,EAAEE,OAAO,CAAE;cAAAmE,QAAA,EAAC;YAE3D;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEC,CAAC,eACNrF,OAAA;QAAK4E,SAAS,EAAC,cAAc;QAAAC,QAAA,GAC1B,GAAG,eAEJ7E,OAAA;UAAK4E,SAAS,EAAC,MAAM;UAAAC,QAAA,EAClB3D,IAAI,CAAC8D,GAAG,CAAC,CAACiB,GAAG,EAAEC,MAAM,kBACpBlG,OAAA;YAAkB4E,SAAS,EAAC,KAAK;YAAAC,QAAA,EAC9BoB,GAAG,CAACjB,GAAG,CAAC,CAACL,IAAI,EAAEwB,OAAO,kBACrBnG,OAAA,CAAClB,IAAI;cAEHsH,GAAG,EAAEzB,IAAI,CAACyB,GAAI;cACdH,GAAG,EAAEtB,IAAI,CAACsB,GAAI;cACdI,OAAO,EAAE1B,IAAI,CAAC0B,OAAQ;cACtBC,QAAQ,EAAE3B,IAAI,CAAC2B,QAAS;cACxBC,MAAM,EAAE5B,IAAI,CAAC4B,MAAO;cACpBC,YAAY,EAAE7B,IAAI,CAAC6B,YAAa;cAChCC,MAAM,EAAE9B,IAAI,CAAC8B,MAAO;cACpBC,QAAQ,EAAE/B,IAAI,CAAC+B,QAAS;cACxB9F,MAAM,EAAE+D,IAAI,CAAC/D;cACb;cAAA;cACA+F,WAAW,EAAGC,KAAK,IACjBxF,eAAe,CAACwF,KAAK,EAAEV,MAAM,EAAEC,OAAO,CACvC;cACDU,YAAY,EAAGD,KAAK,IAAKvF,gBAAgB,CAAC6E,MAAM,EAAEC,OAAO,CAAE;cAC3DW,SAAS,EAAExF;YAAc,GAfpB6E,OAAO;cAAAjB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAgBb,CACF;UAAC,GApBMa,MAAM;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAqBX,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGE,CAAC;AAEV,CAAC;AAAC9E,EAAA,CArQID,qBAAqB;EAAA,QAWoCtB,cAAc,EAKzEC,gBAAgB,EAMdC,gBAAgB;AAAA;AAAA6H,EAAA,GAtBhBzG,qBAAqB;AAuQ3B,eAAeA,qBAAqB;AAAC,IAAAyG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}