{"ast":null,"code":"var _jsxFileName = \"D:\\\\PR'S\\\\pff\\\\pathfinding-visualizer\\\\src\\\\components\\\\PathfindingVisualizer.jsx\",\n  _s = $RefreshSig$();\n// PathfindingVisualizer.jsx\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"./PathfindingVisualizer.css\";\nimport { executeAlgorithm } from \"../algorithms\";\nimport Node from \"./Node\";\nimport Toolbar from \"../utils/ToolBar\";\nimport { useGridHandler } from \"../hooks/useGridHandler\";\nimport { useVisualization } from \"../hooks/useVisualization\";\nimport { useMazeGenerator } from \"../hooks/useMazeGenerator\";\nimport { initialGrid, findStartNode, findFinishNode, initialGrid2 } from \"../utils/GridUtils\";\nimport { dijkstra } from \"../algorithms/dijkstra\";\nimport { dfs } from \"../algorithms/dfs\";\nimport { bfs } from \"../algorithms/bfs\";\nimport { astar } from \"../algorithms/astar\";\nimport { gbfs } from \"../algorithms/gbfs\";\nimport { bidirectional } from \"../algorithms/bidirectional\";\nimport AlgorithmStats from \"./algorithmStats\";\nimport Description from \"./Description\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst algorithms = [{\n  label: \"Dijkstra\",\n  actionKey: \"dijkstra\",\n  func: dijkstra\n}, {\n  label: \"A*\",\n  actionKey: \"astar\",\n  func: astar\n}, {\n  label: \"Greedy Best First Search\",\n  actionKey: \"gbfs\",\n  func: gbfs\n}, {\n  label: \"Bidirectional Search\",\n  actionKey: \"bidirectional\",\n  func: bidirectional\n}, {\n  label: \"Breadth First Search\",\n  actionKey: \"bfs\",\n  func: bfs\n}, {\n  label: \"Depth First Search\",\n  actionKey: \"dfs\",\n  func: dfs\n}];\nconst mazeOptions = [{\n  label: \"Randomize Board\",\n  actionKey: \"randomizeBoard\"\n}, {\n  label: \"Recursive Division Maze\",\n  actionKey: \"generateRecursiveDivisionMaze\"\n}];\nconst PathfindingVisualizer = () => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(true); // Modal is open by default\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  // Function to update the window width state\n  const handleResize = () => {\n    setWindowWidth(window.innerWidth);\n  };\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n  const shouldShowModal = windowWidth > 768 && isModalOpen;\n  const [numRows, setNumRows] = useState(30);\n  const [numCols, setNumCols] = useState(60);\n  const [grid, setGrid] = useState(initialGrid());\n  const {\n    handleMouseDown,\n    handleMouseEnter,\n    handleMouseUp\n  } = useGridHandler(grid, setGrid);\n  const {\n    visualize,\n    clearBoard,\n    resetForVisualization,\n    resetForMaze\n  } = useVisualization(grid, setGrid);\n  const {\n    randomizeBoard,\n    generateWeightedMaze,\n    generateRecursiveDivisionMaze\n  } = useMazeGenerator(grid, setGrid);\n  const [isWeightedGraph, setIsWeightedGraph] = useState(false);\n  const [runtime, setRuntime] = useState(0);\n  const [pathCost, setPathCost] = useState(0);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState(algorithms[0]); // Default to Dijkstra object\n\n  const handleToolbarAction = actionKey => {\n    switch (actionKey) {\n      case \"clearBoard\":\n        clearBoard();\n        break;\n      case \"clearPath\":\n        resetForVisualization();\n        break;\n      case \"randomizeBoard\":\n        resetForMaze();\n        randomizeBoard(); // Assuming this generates a random maze\n        break;\n      case \"generateRecursiveDivisionMaze\":\n        resetForMaze();\n        generateRecursiveDivisionMaze();\n        break;\n      case \"generateWeightedMaze\":\n        resetForMaze();\n        generateWeightedMaze();\n        break;\n      case \"visualize\":\n        resetForVisualization();\n        startVisualization(selectedAlgorithm.actionKey);\n        break;\n      default:\n        if (actionKey.startsWith(\"algo-\")) {\n          const algorithmKey = actionKey.replace(\"algo-\", \"\");\n          const selected = algorithms.find(algo => algo.actionKey === algorithmKey);\n          if (selected) {\n            setSelectedAlgorithm(selected);\n          }\n        }\n        break;\n    }\n  };\n  const startchekinggrid = (rows, columns) => {\n    // setColsd(parseFloat((parseFloat(columns) / 60).toFixed(2)));\n    // setRowsd(((parseFloat(rows))/30).toFixed(2));\n    // setweight(Colsd * Rowsd);\n\n    if (columns < 50) {\n      columns = 50;\n    }\n    if (rows < 30) {\n      rows = 30;\n    }\n    if (columns > 120) {\n      columns = 120;\n    }\n    if (rows > 70) {\n      rows = 70;\n    }\n    setGrid(initialGrid2(rows, columns));\n  };\n  const startVisualization = () => {\n    const startNode = findStartNode(grid);\n    const finishNode = findFinishNode(grid);\n    const algorithmFunc = selectedAlgorithm.func;\n    if (!algorithmFunc) {\n      console.error(`Algorithm function not found.`);\n      return;\n    }\n    const startTime = performance.now(); // Start timing\n    const result = executeAlgorithm(algorithmFunc, grid, startNode, finishNode);\n    const endTime = performance.now(); // End timing\n\n    if (!result || !result.visitedNodesInOrder || !result.nodesInShortestPathOrder) {\n      console.error(\"Algorithm did not return expected result.\");\n      return; // Exit to avoid calling visualize with undefined values\n    }\n    const runtime = endTime - startTime;\n    const pathCost = result.nodesInShortestPathOrder.reduce((acc, node) => acc + node.weight, 0);\n    setRuntime(runtime);\n    setPathCost(pathCost);\n    visualize(result.visitedNodesInOrder, result.nodesInShortestPathOrder);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n      onAction: handleToolbarAction,\n      selectedAlgorithm: selectedAlgorithm.label,\n      algorithmItems: algorithms.map(algo => ({\n        label: algo.label,\n        actionKey: `algo-${algo.actionKey}`\n      })),\n      mazeItems: mazeOptions // Pass the maze options here\n      // isWeightedGraph={isWeightedGraph}\n      ,\n      ispathfinderEnabled: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), shouldShowModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(Description, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(AlgorithmStats, {\n        runtime: runtime,\n        pathCost: pathCost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-settings\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"algorithm-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-label\",\n              children: \"Distance \\u27F7 (Km)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-value\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: numCols,\n                onChange: e => setNumCols(Number(e.target.value)),\n                min: 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-label\",\n              children: \"Distance \\u2195 (Km)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat-value\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: numRows,\n                onChange: e => setNumRows(Number(e.target.value)),\n                min: 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => startchekinggrid(numRows, numCols),\n            children: \"Generate Grid\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-wrapper\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: row.map((node, nodeIdx) => /*#__PURE__*/_jsxDEV(Node, {\n            col: node.col,\n            row: node.row,\n            isStart: node.isStart,\n            isFinish: node.isFinish,\n            isWall: node.isWall,\n            isVisualized: node.isVisualized,\n            isPath: node.isPath,\n            distance: node.distance,\n            weight: node.weight\n            // onMouseDown={() => handleMouseDown(rowIdx, nodeIdx)}\n            ,\n            onMouseDown: event => handleMouseDown(event, rowIdx, nodeIdx),\n            onMouseEnter: event => handleMouseEnter(rowIdx, nodeIdx),\n            onMouseUp: handleMouseUp\n          }, nodeIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 21\n          }, this))\n        }, rowIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n_s(PathfindingVisualizer, \"L0Zm6VIpF2ZZOimgCdxe3kfFsQM=\", false, function () {\n  return [useGridHandler, useVisualization, useMazeGenerator];\n});\n_c = PathfindingVisualizer;\nexport default PathfindingVisualizer;\nvar _c;\n$RefreshReg$(_c, \"PathfindingVisualizer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","executeAlgorithm","Node","Toolbar","useGridHandler","useVisualization","useMazeGenerator","initialGrid","findStartNode","findFinishNode","initialGrid2","dijkstra","dfs","bfs","astar","gbfs","bidirectional","AlgorithmStats","Description","jsxDEV","_jsxDEV","algorithms","label","actionKey","func","mazeOptions","PathfindingVisualizer","_s","isModalOpen","setIsModalOpen","windowWidth","setWindowWidth","window","innerWidth","handleResize","addEventListener","removeEventListener","shouldShowModal","numRows","setNumRows","numCols","setNumCols","grid","setGrid","handleMouseDown","handleMouseEnter","handleMouseUp","visualize","clearBoard","resetForVisualization","resetForMaze","randomizeBoard","generateWeightedMaze","generateRecursiveDivisionMaze","isWeightedGraph","setIsWeightedGraph","runtime","setRuntime","pathCost","setPathCost","selectedAlgorithm","setSelectedAlgorithm","handleToolbarAction","startVisualization","startsWith","algorithmKey","replace","selected","find","algo","startchekinggrid","rows","columns","startNode","finishNode","algorithmFunc","console","error","startTime","performance","now","result","endTime","visitedNodesInOrder","nodesInShortestPathOrder","reduce","acc","node","weight","className","children","onAction","algorithmItems","map","mazeItems","ispathfinderEnabled","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","Number","target","min","onClick","row","rowIdx","nodeIdx","col","isStart","isFinish","isWall","isVisualized","isPath","distance","onMouseDown","event","onMouseEnter","onMouseUp","_c","$RefreshReg$"],"sources":["D:/PR'S/pff/pathfinding-visualizer/src/components/PathfindingVisualizer.jsx"],"sourcesContent":["// PathfindingVisualizer.jsx\r\nimport React, { useState, useRef , useEffect } from \"react\";\r\nimport \"./PathfindingVisualizer.css\";\r\nimport { executeAlgorithm } from \"../algorithms\";\r\nimport Node from \"./Node\";\r\nimport Toolbar from \"../utils/ToolBar\";\r\nimport { useGridHandler } from \"../hooks/useGridHandler\";\r\nimport { useVisualization } from \"../hooks/useVisualization\";\r\nimport { useMazeGenerator } from \"../hooks/useMazeGenerator\";\r\nimport { initialGrid, findStartNode, findFinishNode, initialGrid2 } from \"../utils/GridUtils\";\r\nimport { dijkstra } from \"../algorithms/dijkstra\";\r\nimport { dfs } from \"../algorithms/dfs\";\r\nimport { bfs } from \"../algorithms/bfs\";\r\nimport { astar } from \"../algorithms/astar\";\r\nimport { gbfs } from \"../algorithms/gbfs\";\r\nimport { bidirectional } from \"../algorithms/bidirectional\";\r\nimport AlgorithmStats from \"./algorithmStats\";\r\nimport Description from \"./Description\";\r\n\r\n\r\nconst algorithms = [\r\n  { label: \"Dijkstra\", actionKey: \"dijkstra\", func: dijkstra },\r\n  { label: \"A*\", actionKey: \"astar\", func: astar },\r\n  { label: \"Greedy Best First Search\", actionKey: \"gbfs\", func: gbfs },\r\n  {\r\n    label: \"Bidirectional Search\",\r\n    actionKey: \"bidirectional\",\r\n    func: bidirectional,\r\n  },\r\n  { label: \"Breadth First Search\", actionKey: \"bfs\", func: bfs },\r\n  { label: \"Depth First Search\", actionKey: \"dfs\", func: dfs },\r\n];\r\n\r\nconst mazeOptions = [\r\n  { label: \"Randomize Board\", actionKey: \"randomizeBoard\" },\r\n  {\r\n    label: \"Recursive Division Maze\",\r\n    actionKey: \"generateRecursiveDivisionMaze\",\r\n  },\r\n];\r\n\r\n\r\nconst PathfindingVisualizer = () => {\r\n\r\n  const [isModalOpen, setIsModalOpen] = useState(true); // Modal is open by default\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n  // Function to update the window width state\r\n  const handleResize = () => {\r\n    setWindowWidth(window.innerWidth);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  const shouldShowModal = windowWidth > 768 && isModalOpen;\r\n\r\n  const [numRows, setNumRows] = useState(30);\r\n  const [numCols, setNumCols] = useState(60);\r\n\r\n  const [grid, setGrid] = useState(initialGrid());\r\n  const { handleMouseDown, handleMouseEnter, handleMouseUp } = useGridHandler(\r\n    grid,\r\n    setGrid\r\n  );\r\n  const { visualize, clearBoard, resetForVisualization, resetForMaze } =\r\n    useVisualization(grid, setGrid);\r\n\r\n  const {\r\n    randomizeBoard,\r\n    generateWeightedMaze,\r\n    generateRecursiveDivisionMaze,\r\n  } = useMazeGenerator(grid, setGrid);\r\n  const [isWeightedGraph, setIsWeightedGraph] = useState(false);\r\n\r\n  const [runtime, setRuntime] = useState(0);\r\n  const [pathCost, setPathCost] = useState(0);\r\n\r\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState(algorithms[0]); // Default to Dijkstra object\r\n\r\n  const handleToolbarAction = (actionKey) => {\r\n    switch (actionKey) {\r\n      case \"clearBoard\":\r\n        clearBoard();\r\n        break;\r\n      case \"clearPath\":\r\n        resetForVisualization();\r\n        break;\r\n      case \"randomizeBoard\":\r\n        resetForMaze();\r\n        randomizeBoard(); // Assuming this generates a random maze\r\n        break;\r\n      case \"generateRecursiveDivisionMaze\":\r\n        resetForMaze();\r\n        generateRecursiveDivisionMaze();\r\n        break;\r\n      case \"generateWeightedMaze\":\r\n        resetForMaze();\r\n        generateWeightedMaze();\r\n        break;\r\n      case \"visualize\":\r\n        resetForVisualization();\r\n        startVisualization(selectedAlgorithm.actionKey);\r\n        break;\r\n      default:\r\n        if (actionKey.startsWith(\"algo-\")) {\r\n          const algorithmKey = actionKey.replace(\"algo-\", \"\");\r\n          const selected = algorithms.find(\r\n            (algo) => algo.actionKey === algorithmKey\r\n          );\r\n          if (selected) {\r\n            setSelectedAlgorithm(selected);\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  };\r\n\r\n  const startchekinggrid = (rows,columns) => {\r\n\r\n    // setColsd(parseFloat((parseFloat(columns) / 60).toFixed(2)));\r\n    // setRowsd(((parseFloat(rows))/30).toFixed(2));\r\n    // setweight(Colsd * Rowsd);\r\n\r\n    if(columns < 50){\r\n      columns = 50;  \r\n    }\r\n    if(rows < 30){\r\n      rows = 30;\r\n    }\r\n\r\n\r\n    if(columns > 120 ){\r\n      columns = 120;  \r\n    }\r\n\r\n    if(rows > 70){\r\n      rows = 70;\r\n    }\r\n\r\n    setGrid(initialGrid2(rows, columns));\r\n  };\r\n\r\n  const startVisualization = () => {\r\n    const startNode = findStartNode(grid);\r\n    const finishNode = findFinishNode(grid);\r\n    const algorithmFunc = selectedAlgorithm.func;\r\n\r\n    if (!algorithmFunc) {\r\n      console.error(`Algorithm function not found.`);\r\n      return;\r\n    }\r\n\r\n    const startTime = performance.now(); // Start timing\r\n    const result = executeAlgorithm(algorithmFunc, grid, startNode, finishNode);\r\n    const endTime = performance.now(); // End timing\r\n\r\n    if (\r\n      !result ||\r\n      !result.visitedNodesInOrder ||\r\n      !result.nodesInShortestPathOrder\r\n    ) {\r\n      console.error(\"Algorithm did not return expected result.\");\r\n      return; // Exit to avoid calling visualize with undefined values\r\n    }\r\n\r\n    const runtime = endTime - startTime;\r\n    const pathCost = result.nodesInShortestPathOrder.reduce(\r\n      (acc, node) => acc + node.weight,\r\n      0\r\n    );\r\n\r\n    setRuntime(runtime);\r\n    setPathCost(pathCost);\r\n\r\n    visualize(result.visitedNodesInOrder, result.nodesInShortestPathOrder);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Toolbar\r\n        onAction={handleToolbarAction}\r\n        selectedAlgorithm={selectedAlgorithm.label}\r\n        algorithmItems={algorithms.map((algo) => ({\r\n          label: algo.label,\r\n          actionKey: `algo-${algo.actionKey}`,\r\n        }))}\r\n        mazeItems={mazeOptions} // Pass the maze options here\r\n        // isWeightedGraph={isWeightedGraph}\r\n        ispathfinderEnabled={true}\r\n      />\r\n\r\n      {shouldShowModal && (\r\n          <div className=\"modal\">\r\n            <Description />\r\n          </div>\r\n      )}\r\n\r\n          <div className=\"dashboard\">\r\n        <AlgorithmStats runtime={runtime} pathCost={pathCost} />\r\n        {/* <WeightLegend /> */}\r\n\r\n        <div className=\"grid-settings\">\r\n          <div className=\"algorithm-stats\">\r\n            <div className=\"stat-item\">\r\n              {/* Optional: Icon for runtime */}\r\n              <div className=\"stat-label\">Distance ⟷ (Km)</div>\r\n              <div className=\"stat-value\">\r\n              <input \r\n                  type=\"number\" \r\n                  value={numCols} \r\n                  onChange={(e) => setNumCols(Number(e.target.value))} \r\n                  min={1}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"stat-item\">\r\n              {/* Optional: Icon for path cost */}\r\n              <div className=\"stat-label\">Distance ↕ (Km)</div>\r\n              <div className=\"stat-value\">\r\n                <input \r\n                  type=\"number\" \r\n                  value={numRows} \r\n                  onChange={(e) => setNumRows(Number(e.target.value))} \r\n                  min={1}\r\n                />\r\n              </div>\r\n            </div>\r\n            <button onClick={() => startchekinggrid(numRows, numCols)}>\r\n            Generate Grid\r\n            </button>       \r\n          </div>     \r\n        </div>\r\n\r\n          </div>\r\n  \r\n          <div className=\"grid-wrapper\">\r\n            {\" \"}\r\n            {/* New wrapper for the grid */}\r\n            <div className=\"grid\">\r\n              {grid.map((row, rowIdx) => (\r\n                <div key={rowIdx} className=\"row\">\r\n                  {row.map((node, nodeIdx) => (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={node.col}\r\n                      row={node.row}\r\n                      isStart={node.isStart}\r\n                      isFinish={node.isFinish}\r\n                      isWall={node.isWall}\r\n                      isVisualized={node.isVisualized}\r\n                      isPath={node.isPath}\r\n                      distance={node.distance}\r\n                      weight={node.weight}\r\n                      // onMouseDown={() => handleMouseDown(rowIdx, nodeIdx)}\r\n                      onMouseDown={(event) =>\r\n                        handleMouseDown(event, rowIdx, nodeIdx)\r\n                      }\r\n                      onMouseEnter={(event) => handleMouseEnter(rowIdx, nodeIdx)}\r\n                      onMouseUp={handleMouseUp}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PathfindingVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}