{"ast":null,"code":"import { getAllNodes, sortNodesByDistance, updateUnvisitedNeighbors } from \"./algoHelper\";\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}","map":{"version":3,"names":["getAllNodes","sortNodesByDistance","updateUnvisitedNeighbors","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","length","closestNode","shift","isWall","Infinity","isVisited","push"],"sources":["D:/PR'S/pff/pathfinding-visualizer/src/algorithms/dijkstra.js"],"sourcesContent":["import {\r\n  getAllNodes,\r\n  sortNodesByDistance,\r\n  updateUnvisitedNeighbors,\r\n} from \"./algoHelper\";\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n"],"mappings":"AAAA,SACEA,WAAW,EACXC,mBAAmB,EACnBC,wBAAwB,QACnB,cAAc;AAErB,OAAO,SAASC,QAAQA,CAACC,IAAI,EAAEC,SAAS,EAAEC,UAAU,EAAE;EACpD,MAAMC,mBAAmB,GAAG,EAAE;EAC9BF,SAAS,CAACG,QAAQ,GAAG,CAAC;EACtB,MAAMC,cAAc,GAAGT,WAAW,CAACI,IAAI,CAAC;EACxC,OAAO,CAAC,CAACK,cAAc,CAACC,MAAM,EAAE;IAC9BT,mBAAmB,CAACQ,cAAc,CAAC;IACnC,MAAME,WAAW,GAAGF,cAAc,CAACG,KAAK,CAAC,CAAC;IAC1C;IACA,IAAID,WAAW,CAACE,MAAM,EAAE;IACxB;IACA;IACA,IAAIF,WAAW,CAACH,QAAQ,KAAKM,QAAQ,EAAE,OAAOP,mBAAmB;IAEjEI,WAAW,CAACI,SAAS,GAAG,IAAI;IAC5BR,mBAAmB,CAACS,IAAI,CAACL,WAAW,CAAC;IAErC,IAAIA,WAAW,KAAKL,UAAU,EAAE,OAAOC,mBAAmB;IAE1DL,wBAAwB,CAACS,WAAW,EAAEP,IAAI,CAAC;EAC7C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}