{"ast":null,"code":"var _jsxFileName = \"D:\\\\PR'S\\\\pff\\\\pathfinding-visualizer\\\\src\\\\utils\\\\ToolBar.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ToolBar.css\"; // Ensure your CSS file is set up for styling\nimport { useNavigate } from \"react-router-dom\";\n\n// Button component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button = ({\n  label,\n  onClick,\n  className\n}) => /*#__PURE__*/_jsxDEV(\"button\", {\n  className: `button ${className}`,\n  onClick: onClick,\n  children: label\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 3\n}, this);\n\n// DropdownMenu component\n_c = Button;\nconst DropdownMenu = ({\n  label,\n  items,\n  onActionSelect\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"dropdown\",\n  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"dropbtn\",\n    children: label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown-content\",\n    children: items.map((item, index) => /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"#\",\n      onClick: e => {\n        e.preventDefault();\n        onActionSelect(item.actionKey);\n      },\n      children: item.label\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 14,\n  columnNumber: 3\n}, this);\n_c2 = DropdownMenu;\nconst Sidebar = ({\n  isVisible,\n  onClose\n}) => {\n  _s();\n  const navigate = useNavigate(); // Get the navigate function\n\n  const options = [{\n    label: \"Data Structures\",\n    path: \"/data-structures\"\n  }, {\n    label: \"Search Algorithms\",\n    path: \"/search-algorithms\"\n  }, {\n    label: \"Sorting Algorithms\",\n    path: \"/sorting-algorithms\"\n  }, {\n    label: \"Trees\",\n    path: \"/trees\"\n  }\n  // Add more items as needed\n  ];\n  const handleOptionClick = path => {\n    onClose(); // Optional: Close the sidebar on option click\n    navigate(path); // Navigate to the specified path\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `sidebar ${isVisible ? \"visible\" : \"hidden\"}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tile-container\",\n      children: options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tile\",\n        onClick: () => handleOptionClick(option.path) // Attach click handler\n        ,\n        children: option.label\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n// Toolbar component accepting onAction as a prop for handling action selection\n_s(Sidebar, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c3 = Sidebar;\nconst Toolbar = ({\n  onAction,\n  selectedAlgorithm,\n  algorithmItems,\n  mazeItems,\n  isWeightedGraph,\n  ispathfinderEnabled\n}) => {\n  _s2();\n  const [isSidebarVisible, setIsSidebarVisible] = useState(false);\n  let toolbarItems = [{\n    type: \"button\",\n    label: \"Clear Board\",\n    actionKey: \"clearBoard\",\n    className: \"clear-board-button\"\n  }, {\n    type: \"button\",\n    label: \"Clear Path\",\n    actionKey: \"clearPath\",\n    className: \"clear-path-button\"\n  }, {\n    type: \"dropdown\",\n    label: \"Select Maze ▼\",\n    items: mazeItems,\n    className: \"maze-dropdown\"\n  }, {\n    type: \"dropdown\",\n    label: \"Select Algorithm ▼\",\n    items: algorithmItems,\n    className: \"algorithm-dropdown\"\n  }, {\n    type: \"button\",\n    label: `Visualize ${selectedAlgorithm}`,\n    actionKey: \"visualize\",\n    className: \"visualize-button\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"toolbar\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      label: \"\\u2630\",\n      className: \"sidebar-toggle-button\",\n      onClick: () => setIsSidebarVisible(!isSidebarVisible)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 10\n    }, this), ispathfinderEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar-center\",\n      children: toolbarItems.map((item, index) => {\n        switch (item.type) {\n          case \"button\":\n            return /*#__PURE__*/_jsxDEV(Button, {\n              label: item.label,\n              onClick: () => onAction(item.actionKey),\n              className: item.className\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 19\n            }, this);\n          case \"dropdown\":\n            return /*#__PURE__*/_jsxDEV(DropdownMenu, {\n              label: item.label,\n              items: item.items,\n              onActionSelect: actionKey => {\n                onAction(actionKey);\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 19\n            }, this);\n          default:\n            return null;\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }, this), isSidebarVisible && /*#__PURE__*/_jsxDEV(Sidebar, {\n      isVisible: isSidebarVisible,\n      onClose: () => setIsSidebarVisible(false) // Close sidebar when ✖ clicked\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 7\n  }, this);\n};\n_s2(Toolbar, \"8jeHv6I9hnCiZExLpTciYN1zrHM=\");\n_c4 = Toolbar;\nexport default Toolbar;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"DropdownMenu\");\n$RefreshReg$(_c3, \"Sidebar\");\n$RefreshReg$(_c4, \"Toolbar\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Button","label","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","DropdownMenu","items","onActionSelect","map","item","index","href","e","preventDefault","actionKey","_c2","Sidebar","isVisible","onClose","_s","navigate","options","path","handleOptionClick","option","_c3","Toolbar","onAction","selectedAlgorithm","algorithmItems","mazeItems","isWeightedGraph","ispathfinderEnabled","_s2","isSidebarVisible","setIsSidebarVisible","toolbarItems","type","_c4","$RefreshReg$"],"sources":["D:/PR'S/pff/pathfinding-visualizer/src/utils/ToolBar.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ToolBar.css\"; // Ensure your CSS file is set up for styling\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// Button component\r\nconst Button = ({ label, onClick, className }) => (\r\n  <button className={`button ${className}`} onClick={onClick}>\r\n    {label}\r\n  </button>\r\n);\r\n\r\n// DropdownMenu component\r\nconst DropdownMenu = ({ label, items, onActionSelect }) => (\r\n  <div className=\"dropdown\">\r\n    <button className=\"dropbtn\">{label}</button>\r\n    <div className=\"dropdown-content\">\r\n      {items.map((item, index) => (\r\n        <a\r\n          key={index}\r\n          href=\"#\"\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            onActionSelect(item.actionKey);\r\n          }}\r\n        >\r\n          {item.label}\r\n        </a>\r\n         \r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst Sidebar = ({ isVisible, onClose }) => {\r\n  const navigate = useNavigate(); // Get the navigate function\r\n\r\n  const options = [\r\n    { label: \"Data Structures\", path: \"/data-structures\" },\r\n    { label: \"Search Algorithms\", path: \"/search-algorithms\" },\r\n    { label: \"Sorting Algorithms\", path: \"/sorting-algorithms\" },\r\n    { label: \"Trees\", path: \"/trees\" },\r\n    // Add more items as needed\r\n  ];\r\n\r\n  const handleOptionClick = (path) => {\r\n    onClose(); // Optional: Close the sidebar on option click\r\n    navigate(path); // Navigate to the specified path\r\n  };\r\n\r\n  return (\r\n    <div className={`sidebar ${isVisible ? \"visible\" : \"hidden\"}`}>\r\n      <div className=\"tile-container\">\r\n        {options.map((option, index) => (\r\n          <div\r\n            className=\"tile\"\r\n            key={index}\r\n            onClick={() => handleOptionClick(option.path)} // Attach click handler\r\n          >\r\n            {option.label}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Toolbar component accepting onAction as a prop for handling action selection\r\nconst Toolbar = ({\r\n  onAction,\r\n  selectedAlgorithm,\r\n  algorithmItems,\r\n  mazeItems,\r\n  isWeightedGraph,\r\n  ispathfinderEnabled\r\n}) => {\r\n\r\n  const [isSidebarVisible, setIsSidebarVisible] = useState(false);\r\n  let toolbarItems = [\r\n   \r\n    {\r\n      type: \"button\",\r\n      label: \"Clear Board\",\r\n      actionKey: \"clearBoard\",\r\n      className: \"clear-board-button\",\r\n    },\r\n    {\r\n      type: \"button\",\r\n      label: \"Clear Path\",\r\n      actionKey: \"clearPath\",\r\n      className: \"clear-path-button\",\r\n    },\r\n    {\r\n      type: \"dropdown\",\r\n      label: \"Select Maze ▼\",\r\n      items: mazeItems,\r\n      className: \"maze-dropdown\",\r\n    },\r\n    {\r\n      type: \"dropdown\",\r\n      label: \"Select Algorithm ▼\",\r\n      items: algorithmItems,\r\n      className: \"algorithm-dropdown\",\r\n    },\r\n    {\r\n      type: \"button\",\r\n      label: `Visualize ${selectedAlgorithm}`,\r\n      actionKey: \"visualize\",\r\n      className: \"visualize-button\",\r\n    },\r\n\r\n  ];\r\n\r\n  return (  \r\n      <div className=\"toolbar\">\r\n         <Button\r\n            label=\"☰\"\r\n            className=\"sidebar-toggle-button\"\r\n            onClick={() => setIsSidebarVisible(!isSidebarVisible)}\r\n        />\r\n\r\n\r\n        {/* <Button\r\n            label=\"Visual\"\r\n            className=\"sidebar-toggle-button2\"\r\n        /> */}\r\n\r\n        {ispathfinderEnabled && (\r\n          <div className=\"toolbar-center\">\r\n          {toolbarItems.map((item, index) => {\r\n            switch (item.type) {\r\n              case \"button\":\r\n                return (\r\n                  <Button\r\n                    key={index}\r\n                    label={item.label}\r\n                    onClick={() => onAction(item.actionKey)}\r\n                    className={item.className}\r\n                  />\r\n                );\r\n              case \"dropdown\":\r\n                return (\r\n                  <DropdownMenu\r\n                    key={index}\r\n                    label={item.label}\r\n                    items={item.items}\r\n                    onActionSelect={(actionKey) => {\r\n                      onAction(actionKey);\r\n                    }}\r\n                  />\r\n                );\r\n              default:\r\n                return null;\r\n            }\r\n          })}\r\n        </div>\r\n        )}\r\n\r\n        {isSidebarVisible && (\r\n          <Sidebar\r\n            isVisible={isSidebarVisible}\r\n            onClose={() => setIsSidebarVisible(false)} // Close sidebar when ✖ clicked\r\n          />\r\n        )}\r\n      </div>   \r\n  );\r\n\r\n\r\n};\r\n\r\nexport default Toolbar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}