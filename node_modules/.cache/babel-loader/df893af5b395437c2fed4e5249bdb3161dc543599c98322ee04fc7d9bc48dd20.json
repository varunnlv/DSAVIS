{"ast":null,"code":"export function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\nexport function sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\nexport function updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + node.weight;\n    neighbor.previousNode = node;\n  }\n}\nexport function getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\nexport function getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}","map":{"version":3,"names":["getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift","previousNode","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","node","grid","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","weight","neighbors","col","row","push","length","filter","isVisited","getAllNodes","nodes"],"sources":["D:/PR'S/pff/pathfinding-visualizer/src/algorithms/algoHelper.js"],"sourcesContent":["export function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n\r\nexport function sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nexport function updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + node.weight;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nexport function getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nexport function getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,2BAA2BA,CAACC,UAAU,EAAE;EACtD,MAAMC,wBAAwB,GAAG,EAAE;EACnC,IAAIC,WAAW,GAAGF,UAAU;EAC5B,OAAOE,WAAW,EAAE;IAClBD,wBAAwB,CAACE,OAAO,CAACD,WAAW,CAAC;IAC7CA,WAAW,GAAGA,WAAW,CAACE,YAAY;EACxC;EACA,OAAOH,wBAAwB;AACjC;AAEA,OAAO,SAASI,mBAAmBA,CAACC,cAAc,EAAE;EAClDA,cAAc,CAACC,IAAI,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAKD,KAAK,CAACE,QAAQ,GAAGD,KAAK,CAACC,QAAQ,CAAC;AACxE;AAEA,OAAO,SAASC,wBAAwBA,CAACC,IAAI,EAAEC,IAAI,EAAE;EACnD,MAAMC,kBAAkB,GAAGC,qBAAqB,CAACH,IAAI,EAAEC,IAAI,CAAC;EAC5D,KAAK,MAAMG,QAAQ,IAAIF,kBAAkB,EAAE;IACzCE,QAAQ,CAACN,QAAQ,GAAGE,IAAI,CAACF,QAAQ,GAAGE,IAAI,CAACK,MAAM;IAC/CD,QAAQ,CAACZ,YAAY,GAAGQ,IAAI;EAC9B;AACF;AAEA,OAAO,SAASG,qBAAqBA,CAACH,IAAI,EAAEC,IAAI,EAAE;EAChD,MAAMK,SAAS,GAAG,EAAE;EACpB,MAAM;IAAEC,GAAG;IAAEC;EAAI,CAAC,GAAGR,IAAI;EACzB,IAAIQ,GAAG,GAAG,CAAC,EAAEF,SAAS,CAACG,IAAI,CAACR,IAAI,CAACO,GAAG,GAAG,CAAC,CAAC,CAACD,GAAG,CAAC,CAAC;EAC/C,IAAIC,GAAG,GAAGP,IAAI,CAACS,MAAM,GAAG,CAAC,EAAEJ,SAAS,CAACG,IAAI,CAACR,IAAI,CAACO,GAAG,GAAG,CAAC,CAAC,CAACD,GAAG,CAAC,CAAC;EAC7D,IAAIA,GAAG,GAAG,CAAC,EAAED,SAAS,CAACG,IAAI,CAACR,IAAI,CAACO,GAAG,CAAC,CAACD,GAAG,GAAG,CAAC,CAAC,CAAC;EAC/C,IAAIA,GAAG,GAAGN,IAAI,CAAC,CAAC,CAAC,CAACS,MAAM,GAAG,CAAC,EAAEJ,SAAS,CAACG,IAAI,CAACR,IAAI,CAACO,GAAG,CAAC,CAACD,GAAG,GAAG,CAAC,CAAC,CAAC;EAChE,OAAOD,SAAS,CAACK,MAAM,CAAEP,QAAQ,IAAK,CAACA,QAAQ,CAACQ,SAAS,CAAC;AAC5D;AAEA,OAAO,SAASC,WAAWA,CAACZ,IAAI,EAAE;EAChC,MAAMa,KAAK,GAAG,EAAE;EAChB,KAAK,MAAMN,GAAG,IAAIP,IAAI,EAAE;IACtB,KAAK,MAAMD,IAAI,IAAIQ,GAAG,EAAE;MACtBM,KAAK,CAACL,IAAI,CAACT,IAAI,CAAC;IAClB;EACF;EACA,OAAOc,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}