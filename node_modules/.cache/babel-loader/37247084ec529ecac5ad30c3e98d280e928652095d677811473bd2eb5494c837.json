{"ast":null,"code":"var _jsxFileName = \"D:\\\\PR'S\\\\pff\\\\pathfinding-visualizer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Routes, useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./components/PathfindingVisualizer\";\nimport Description from \"./components/Description\";\nimport Home from \"./components/Home\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(true); // Modal is open by default\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const location = useLocation(); // Get the current location\n\n  // Function to update the window width state\n  const handleResize = () => {\n    setWindowWidth(window.innerWidth);\n  };\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n  const shouldShowModal = windowWidth > 768 && isModalOpen;\n\n  // Close the modal if the user navigates away from the \"/pathfinder\" route\n  useEffect(() => {\n    if (location.pathname !== \"/pathfinder\") {\n      setIsModalOpen(false); // Close modal if not on pathfinder route\n    }\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [shouldShowModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(Description, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/pathfinder\",\n        element: /*#__PURE__*/_jsxDEV(PathfindingVisualizer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 44\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MkSlpvkIg6O9W/KXgKCYGmIoyQA=\", false, function () {\n  return [useLocation];\n});\n_c = App;\nfunction AppWrapper() {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_c2 = AppWrapper;\nexport default AppWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"AppWrapper\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","useLocation","PathfindingVisualizer","Description","Home","jsxDEV","_jsxDEV","App","_s","isModalOpen","setIsModalOpen","windowWidth","setWindowWidth","window","innerWidth","location","handleResize","addEventListener","removeEventListener","shouldShowModal","pathname","className","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","AppWrapper","_c2","$RefreshReg$"],"sources":["D:/PR'S/pff/pathfinding-visualizer/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Route, Routes, useLocation } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport PathfindingVisualizer from \"./components/PathfindingVisualizer\";\r\nimport Description from \"./components/Description\";\r\nimport Home from \"./components/Home\";\r\n\r\nfunction App() {\r\n  const [isModalOpen, setIsModalOpen] = useState(true); // Modal is open by default\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n  const location = useLocation(); // Get the current location\r\n\r\n  // Function to update the window width state\r\n  const handleResize = () => {\r\n    setWindowWidth(window.innerWidth);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  const shouldShowModal = windowWidth > 768 && isModalOpen;\r\n\r\n  // Close the modal if the user navigates away from the \"/pathfinder\" route\r\n  useEffect(() => {\r\n    if (location.pathname !== \"/pathfinder\") {\r\n      setIsModalOpen(false); // Close modal if not on pathfinder route\r\n    }\r\n  }, [location]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {shouldShowModal && (\r\n        <div className=\"modal\">\r\n          <Description />\r\n        </div>\r\n      )}\r\n\r\n      {/* Define the routes */}\r\n      <Routes>\r\n        <Route path=\"/\" element={<Home />} />\r\n        <Route path=\"/pathfinder\" element={<PathfindingVisualizer />} />\r\n        {/* <Route path=\"/about\" element={<About />} />\r\n        <Route path=\"/contact\" element={<Contact />} /> */}\r\n      </Routes>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction AppWrapper() {\r\n  return (\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default AppWrapper;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}