{"ast":null,"code":"var _jsxFileName = \"D:\\\\PR'S\\\\pff\\\\pathfinding-visualizer\\\\src\\\\components\\\\Sorting.jsx\",\n  _s = $RefreshSig$();\n// PathfindingVisualizer.jsx\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"./Sorting.css\";\nimport { executeAlgorithm } from \"../algorithms\";\nimport Node from \"./Node\";\nimport Toolbar from \"../utils/ToolBar\";\nimport { useGridHandler } from \"../hooks/useGridHandler\";\nimport { useVisualization } from \"../hooks/useVisualization\";\nimport { useMazeGenerator } from \"../hooks/useMazeGenerator\";\nimport { initialGrid, findStartNode, findFinishNode, initialGrid2 } from \"../utils/GridUtils\";\nimport { dijkstra } from \"../algorithms/dijkstra\";\nimport { dfs } from \"../algorithms/dfs\";\nimport { bfs } from \"../algorithms/bfs\";\nimport { astar } from \"../algorithms/astar\";\nimport { gbfs } from \"../algorithms/gbfs\";\nimport { bidirectional } from \"../algorithms/bidirectional\";\nimport AlgorithmStats from \"./algorithmStats\";\nimport Description from \"./Description\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst algorithms = [{\n  label: \"Dijkstra\",\n  actionKey: \"dijkstra\",\n  func: dijkstra\n}, {\n  label: \"A*\",\n  actionKey: \"astar\",\n  func: astar\n}, {\n  label: \"Greedy Best First Search\",\n  actionKey: \"gbfs\",\n  func: gbfs\n}, {\n  label: \"Bidirectional Search\",\n  actionKey: \"bidirectional\",\n  func: bidirectional\n}, {\n  label: \"Breadth First Search\",\n  actionKey: \"bfs\",\n  func: bfs\n}, {\n  label: \"Depth First Search\",\n  actionKey: \"dfs\",\n  func: dfs\n}];\nconst mazeOptions = [{\n  label: \"Randomize Board\",\n  actionKey: \"randomizeBoard\"\n}, {\n  label: \"Recursive Division Maze\",\n  actionKey: \"generateRecursiveDivisionMaze\"\n}];\nconst Sorting = () => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(true); // Modal is open by default\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  // Function to update the window width state\n  const handleResize = () => {\n    setWindowWidth(window.innerWidth);\n  };\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n  const shouldShowModal = windowWidth > 768 && isModalOpen;\n  const [grid, setGrid] = useState(initialGrid());\n  const {\n    handleMouseDown,\n    handleMouseEnter,\n    handleMouseUp\n  } = useGridHandler(grid, setGrid);\n  const {\n    visualize,\n    clearBoard,\n    resetForVisualization,\n    resetForMaze\n  } = useVisualization(grid, setGrid);\n  const {\n    randomizeBoard,\n    generateWeightedMaze,\n    generateRecursiveDivisionMaze\n  } = useMazeGenerator(grid, setGrid);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState(algorithms[0]); // Default to Dijkstra object\n\n  const handleToolbarAction = actionKey => {\n    switch (actionKey) {\n      case \"clearBoard\":\n        clearBoard();\n        break;\n      case \"clearPath\":\n        resetForVisualization();\n        break;\n      case \"randomizeBoard\":\n        resetForMaze();\n        randomizeBoard(); // Assuming this generates a random maze\n        break;\n      case \"generateRecursiveDivisionMaze\":\n        resetForMaze();\n        generateRecursiveDivisionMaze();\n        break;\n      case \"generateWeightedMaze\":\n        resetForMaze();\n        generateWeightedMaze();\n        break;\n      case \"visualize\":\n        resetForVisualization();\n        startVisualization(selectedAlgorithm.actionKey);\n        break;\n      default:\n        if (actionKey.startsWith(\"algo-\")) {\n          const algorithmKey = actionKey.replace(\"algo-\", \"\");\n          const selected = algorithms.find(algo => algo.actionKey === algorithmKey);\n          if (selected) {\n            setSelectedAlgorithm(selected);\n          }\n        }\n        break;\n    }\n  };\n  const startVisualization = () => {\n    const startNode = findStartNode(grid);\n    const finishNode = findFinishNode(grid);\n    const algorithmFunc = selectedAlgorithm.func;\n    if (!algorithmFunc) {\n      console.error(`Algorithm function not found.`);\n      return;\n    }\n    const result = executeAlgorithm(algorithmFunc, grid, startNode, finishNode);\n    if (!result || !result.visitedNodesInOrder || !result.nodesInShortestPathOrder) {\n      console.error(\"Algorithm did not return expected result.\");\n      return; // Exit to avoid calling visualize with undefined values\n    }\n    visualize(result.visitedNodesInOrder, result.nodesInShortestPathOrder);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n      onAction: handleToolbarAction,\n      selectedAlgorithm: selectedAlgorithm.label,\n      algorithmItems: algorithms.map(algo => ({\n        label: algo.label,\n        actionKey: `algo-${algo.actionKey}`\n      })),\n      mazeItems: mazeOptions // Pass the maze options here\n      // isWeightedGraph={isWeightedGraph}\n      ,\n      ispathfinderEnabled: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), shouldShowModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(Description, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"inner-page\",\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"overview\",\n        className: \"pt-0\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"highlighted-text\",\n            children: \"Overview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4 explanation ml-2 mr-2\",\n            style: {\n              fontSize: \"large\"\n            },\n            children: [\"A sorting algorithm is an algorithm that puts elements of a list in a certain order (thus sorting the list). The most frequently used orders are numerical order for lists of numbers and lexicographical order for lists of strings.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 15\n            }, this), \"To put it more formally, the output generally has to fulfill two conditions:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"The output is in nondecreasing order\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"The output is a permutation of the input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this), \"Or, to put it simply, when running a sorting algorithm we expect an output that contains all the elements originally present in the input arranged in such a way that the smallest element (according to the operation used to sort the list) is in the leftmost place, with every element following being either bigger or equal to its predecessor.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 15\n            }, this), \"Sorting algorithms can generally be classified into three distinct categories:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Comparison sorts\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Non-comparison sorts\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Others\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 15\n            }, this), \"On this page you can find many implementations for every category. If you need a visualization for a certain algorithm, just use the search function to find it quickly.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container-fluid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row mt-5 highlighted-text\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm-12 text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row justify-content-center mt-2\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm-12 col-md-10 col-lg-8\",\n              children: /*#__PURE__*/_jsxDEV(\"form\", {\n                className: \"card card-sm border-red\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-body row no-gutters align-items-center\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"col-auto\",\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"bx bx-search h4 text-body\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 214,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"col\",\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      id: \"search\",\n                      className: \"form-control form-control-borderless\",\n                      type: \"search\",\n                      placeholder: \"Search names or keywords\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 218,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 217,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"anchor w-100\",\n                    id: \"comparison\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 225,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(Sorting, \"1vgZaiqH9d8hQWcIbYn2W/iWe7w=\", false, function () {\n  return [useGridHandler, useVisualization, useMazeGenerator];\n});\n_c = Sorting;\nexport default Sorting;\nvar _c;\n$RefreshReg$(_c, \"Sorting\");","map":{"version":3,"names":["React","useState","useRef","useEffect","executeAlgorithm","Node","Toolbar","useGridHandler","useVisualization","useMazeGenerator","initialGrid","findStartNode","findFinishNode","initialGrid2","dijkstra","dfs","bfs","astar","gbfs","bidirectional","AlgorithmStats","Description","jsxDEV","_jsxDEV","algorithms","label","actionKey","func","mazeOptions","Sorting","_s","isModalOpen","setIsModalOpen","windowWidth","setWindowWidth","window","innerWidth","handleResize","addEventListener","removeEventListener","shouldShowModal","grid","setGrid","handleMouseDown","handleMouseEnter","handleMouseUp","visualize","clearBoard","resetForVisualization","resetForMaze","randomizeBoard","generateWeightedMaze","generateRecursiveDivisionMaze","selectedAlgorithm","setSelectedAlgorithm","handleToolbarAction","startVisualization","startsWith","algorithmKey","replace","selected","find","algo","startNode","finishNode","algorithmFunc","console","error","result","visitedNodesInOrder","nodesInShortestPathOrder","className","children","onAction","algorithmItems","map","mazeItems","ispathfinderEnabled","fileName","_jsxFileName","lineNumber","columnNumber","id","style","fontSize","type","placeholder","_c","$RefreshReg$"],"sources":["D:/PR'S/pff/pathfinding-visualizer/src/components/Sorting.jsx"],"sourcesContent":["// PathfindingVisualizer.jsx\r\nimport React, { useState, useRef , useEffect } from \"react\";\r\nimport \"./Sorting.css\";\r\nimport { executeAlgorithm } from \"../algorithms\";\r\nimport Node from \"./Node\";\r\nimport Toolbar from \"../utils/ToolBar\";\r\nimport { useGridHandler } from \"../hooks/useGridHandler\";\r\nimport { useVisualization } from \"../hooks/useVisualization\";\r\nimport { useMazeGenerator } from \"../hooks/useMazeGenerator\";\r\nimport { initialGrid, findStartNode, findFinishNode, initialGrid2 } from \"../utils/GridUtils\";\r\nimport { dijkstra } from \"../algorithms/dijkstra\";\r\nimport { dfs } from \"../algorithms/dfs\";\r\nimport { bfs } from \"../algorithms/bfs\";\r\nimport { astar } from \"../algorithms/astar\";\r\nimport { gbfs } from \"../algorithms/gbfs\";\r\nimport { bidirectional } from \"../algorithms/bidirectional\";\r\nimport AlgorithmStats from \"./algorithmStats\";\r\nimport Description from \"./Description\";\r\n\r\n\r\nconst algorithms = [\r\n  { label: \"Dijkstra\", actionKey: \"dijkstra\", func: dijkstra },\r\n  { label: \"A*\", actionKey: \"astar\", func: astar },\r\n  { label: \"Greedy Best First Search\", actionKey: \"gbfs\", func: gbfs },\r\n  {\r\n    label: \"Bidirectional Search\",\r\n    actionKey: \"bidirectional\",\r\n    func: bidirectional,\r\n  },\r\n  { label: \"Breadth First Search\", actionKey: \"bfs\", func: bfs },\r\n  { label: \"Depth First Search\", actionKey: \"dfs\", func: dfs },\r\n];\r\n\r\nconst mazeOptions = [\r\n  { label: \"Randomize Board\", actionKey: \"randomizeBoard\" },\r\n  {\r\n    label: \"Recursive Division Maze\",\r\n    actionKey: \"generateRecursiveDivisionMaze\",\r\n  },\r\n];\r\n\r\n\r\nconst Sorting = () => {\r\n\r\n  const [isModalOpen, setIsModalOpen] = useState(true); // Modal is open by default\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n  // Function to update the window width state\r\n  const handleResize = () => {\r\n    setWindowWidth(window.innerWidth);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  const shouldShowModal = windowWidth > 768 && isModalOpen;\r\n\r\n  const [grid, setGrid] = useState(initialGrid());\r\n  const { handleMouseDown, handleMouseEnter, handleMouseUp } = useGridHandler(\r\n    grid,\r\n    setGrid\r\n  );\r\n  const { visualize, clearBoard, resetForVisualization, resetForMaze } =\r\n    useVisualization(grid, setGrid);\r\n\r\n  const {\r\n    randomizeBoard,\r\n    generateWeightedMaze,\r\n    generateRecursiveDivisionMaze,\r\n  } = useMazeGenerator(grid, setGrid);\r\n\r\n\r\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState(algorithms[0]); // Default to Dijkstra object\r\n\r\n  const handleToolbarAction = (actionKey) => {\r\n    switch (actionKey) {\r\n      case \"clearBoard\":\r\n        clearBoard();\r\n        break;\r\n      case \"clearPath\":\r\n        resetForVisualization();\r\n        break;\r\n      case \"randomizeBoard\":\r\n        resetForMaze();\r\n        randomizeBoard(); // Assuming this generates a random maze\r\n        break;\r\n      case \"generateRecursiveDivisionMaze\":\r\n        resetForMaze();\r\n        generateRecursiveDivisionMaze();\r\n        break;\r\n      case \"generateWeightedMaze\":\r\n        resetForMaze();\r\n        generateWeightedMaze();\r\n        break;\r\n      case \"visualize\":\r\n        resetForVisualization();\r\n        startVisualization(selectedAlgorithm.actionKey);\r\n        break;\r\n      default:\r\n        if (actionKey.startsWith(\"algo-\")) {\r\n          const algorithmKey = actionKey.replace(\"algo-\", \"\");\r\n          const selected = algorithms.find(\r\n            (algo) => algo.actionKey === algorithmKey\r\n          );\r\n          if (selected) {\r\n            setSelectedAlgorithm(selected);\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  };\r\n\r\n  const startVisualization = () => {\r\n    const startNode = findStartNode(grid);\r\n    const finishNode = findFinishNode(grid);\r\n    const algorithmFunc = selectedAlgorithm.func;\r\n\r\n    if (!algorithmFunc) {\r\n      console.error(`Algorithm function not found.`);\r\n      return;\r\n    }\r\n\r\n    const result = executeAlgorithm(algorithmFunc, grid, startNode, finishNode);\r\n\r\n\r\n    if (\r\n      !result ||\r\n      !result.visitedNodesInOrder ||\r\n      !result.nodesInShortestPathOrder\r\n    ) {\r\n      console.error(\"Algorithm did not return expected result.\");\r\n      return; // Exit to avoid calling visualize with undefined values\r\n    }\r\n\r\n\r\n\r\n    visualize(result.visitedNodesInOrder, result.nodesInShortestPathOrder);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Toolbar\r\n        onAction={handleToolbarAction}\r\n        selectedAlgorithm={selectedAlgorithm.label}\r\n        algorithmItems={algorithms.map((algo) => ({\r\n          label: algo.label,\r\n          actionKey: `algo-${algo.actionKey}`,\r\n        }))}\r\n        mazeItems={mazeOptions} // Pass the maze options here\r\n        // isWeightedGraph={isWeightedGraph}\r\n        ispathfinderEnabled={false}\r\n      />\r\n\r\n      {shouldShowModal && (\r\n          <div className=\"modal\">\r\n            <Description />\r\n          </div>\r\n      )}\r\n\r\n\r\n      <section className=\"inner-page\">\r\n        <section id=\"overview\" className=\"pt-0\">\r\n          <div className=\"container\">\r\n            <h3 className=\"highlighted-text\">Overview</h3>\r\n            <div className=\"mb-4 explanation ml-2 mr-2\" style={{ fontSize: \"large\" }}>\r\n              A sorting algorithm is an algorithm that puts elements of a list\r\n              in a certain order (thus sorting the list). The most frequently\r\n              used orders are numerical order for lists of numbers and\r\n              lexicographical order for lists of strings.\r\n              <br />\r\n              <br />\r\n              To put it more formally, the output generally has to fulfill two\r\n              conditions:\r\n              <ul>\r\n                <li>The output is in nondecreasing order</li>\r\n                <li>The output is a permutation of the input</li>\r\n              </ul>\r\n              Or, to put it simply, when running a sorting algorithm we expect\r\n              an output that contains all the elements originally present in the\r\n              input arranged in such a way that the smallest element (according\r\n              to the operation used to sort the list) is in the leftmost place,\r\n              with every element following being either bigger or equal to its\r\n              predecessor.\r\n              <br />\r\n              <br />\r\n              Sorting algorithms can generally be classified into three distinct\r\n              categories:\r\n              <ul>\r\n                <li>Comparison sorts</li>\r\n                <li>Non-comparison sorts</li>\r\n                <li>Others</li>\r\n              </ul>\r\n              On this page you can find many implementations for every category.\r\n              If you need a visualization for a certain algorithm, just use the\r\n              search function to find it quickly.\r\n            </div>\r\n          </div>\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row mt-5 highlighted-text\">\r\n              <div className=\"col-sm-12 text-center\">\r\n                <h2>Search</h2>\r\n              </div>\r\n            </div>\r\n            <div className=\"row justify-content-center mt-2\">\r\n              <div className=\"col-sm-12 col-md-10 col-lg-8\">\r\n                <form className=\"card card-sm border-red\">\r\n                  <div className=\"card-body row no-gutters align-items-center\">\r\n                    <div className=\"col-auto\">\r\n                      <i className=\"bx bx-search h4 text-body\"></i>\r\n                    </div>\r\n                    {/*end of col*/}\r\n                    <div className=\"col\">\r\n                      <input\r\n                        id=\"search\"\r\n                        className=\"form-control form-control-borderless\"\r\n                        type=\"search\"\r\n                        placeholder=\"Search names or keywords\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"anchor w-100\" id=\"comparison\"></div>\r\n                    {/*end of col*/}\r\n                    {/*end of col*/}\r\n                  </div>\r\n                </form>\r\n              </div>\r\n              {/*end of col*/}\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </section>\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sorting;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}